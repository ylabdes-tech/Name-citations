name: Build Android APK
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_HOME: /home/runner/android-sdk
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      PATH: /bin:/usr/bin:/usr/local/bin:/home/runner/.local/bin:$PATH:/home/runner/android-sdk/cmdline-tools/latest/bin:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/build-tools/30.0.3
      PYTHONPATH: /home/runner/.local/lib/python3.8/site-packages:/usr/lib/python3/dist-packages:/usr/local/lib/python3.8/dist-packages:$PYTHONPATH
    steps:
    - name: Diagnose environment
      run: |
        echo "Diagnosing environment..."
        echo "Current PATH: $PATH"
        echo "Current PYTHONPATH: $PYTHONPATH"
        echo "Python version:"
        /usr/bin/python3 --version || echo "Python not found"
        which /usr/bin/python3
        echo "Pip version:"
        /usr/bin/pip3 --version || echo "pip3 not found"
        which /usr/bin/pip3
        echo "Listing /bin, /usr/bin, /usr/local/bin, ~/.local/bin contents:"
        ls -la /bin /usr/bin /usr/local/bin /home/runner/.local/bin || echo "Failed to list system directories"
        echo "Checking critical commands:"
        /usr/bin/sudo /usr/bin/apt-get --version && echo "apt-get found" || echo "apt-get not found"
        /usr/bin/git --version && echo "git found" || echo "git not found"
        /bin/tar --version && echo "tar found" || echo "tar not found"
        /home/runner/.local/bin/buildozer --version && echo "buildozer found" || echo "buildozer not found"
    - name: Clean apt locks
      run: |
        echo "Cleaning apt locks..."
        /usr/bin/sudo rm -f /var/lib/apt/lists/lock
        /usr/bin/sudo rm -f /var/cache/apt/*.bin
        /usr/bin/sudo rm -rf /var/lib/apt/lists/*
    - name: Install system dependencies
      run: |
        /usr/bin/sudo /usr/bin/apt-get update
        /usr/bin/sudo /usr/bin/apt-get install -y git tar build-essential python3-dev ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev openjdk-8-jdk openjdk-8-jre unzip zlib1g-dev libffi-dev libssl-dev gcc g++ libc6-dev libstdc++6
        /usr/bin/git --version
        /bin/tar --version
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - name: Clean Python environment
      run: |
        echo "Cleaning Python user environment..."
        /usr/bin/sudo rm -rf /home/runner/.local /home/runner/.kivy /home/runner/.cache/pip
    - name: Install Python dependencies
      run: |
        echo "Upgrading pip..."
        /usr/bin/sudo /usr/bin/python3 -m pip install --upgrade pip
        echo "Installing base Python dependencies..."
        /usr/bin/sudo /usr/bin/python3 -m pip install buildozer cython==0.29.36 kivy==2.2.1 plyer --verbose > pip_base_install.log 2>&1
        echo "Listing base pip install log:"
        cat pip_base_install.log
        echo "Installing pyjnius separately..."
        /usr/bin/sudo /usr/bin/python3 -m pip install pyjnius==1.6.1 --verbose > pip_pyjnius_install.log 2>&1
        echo "Listing pyjnius pip install log:"
        cat pip_pyjnius_install.log
        echo "Listing installed Python packages:"
        /usr/bin/python3 -m pip list
        echo "Listing Python site-packages directories:"
        ls -la /usr/lib/python3/dist-packages/ /usr/local/lib/python3.8/dist-packages/ || echo "Failed to list system site-packages"
        ls -la /home/runner/.local/lib/python3.8/site-packages/ || echo "Failed to list user site-packages"
        echo "Checking Python dependencies:"
        /usr/bin/python3 -c "import kivy; print('Kivy version:', kivy.__version__)" || { echo "Kivy import failed"; exit 1; }
        /usr/bin/python3 -c "import pyjnius; print('Pyjnius version:', pyjnius.__version__)" || { echo "Pyjnius import failed"; exit 1; }
        /usr/bin/python3 -c "import plyer; print('Plyer imported successfully')" || { echo "Plyer import failed"; exit 1; }
    - name: Clean Buildozer and python-for-android cache
      run: |
        echo "Cleaning Buildozer and python-for-android cache..."
        /usr/bin/sudo rm -rf /home/runner/.buildozer
        /usr/bin/sudo rm -rf .buildozer
        /usr/bin/sudo rm -rf /home/runner/work/Name-citations/Name-citations/.buildozer/android/platform/build-arm64-v8a_armeabi-v7a
    - name: Install Android SDK
      run: |
        mkdir -p $ANDROID_HOME/cmdline-tools
        /usr/bin/wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        /usr/bin/unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        echo "Installing SDK components..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "build-tools;30.0.3" "platforms;android-30" "platform-tools"
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME --licenses
        # Create symbolic link for sdkmanager to match Buildozer's expected path
        mkdir -p $ANDROID_HOME/tools/bin
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
        # Verify SDK installation
        ls -la $ANDROID_HOME/cmdline-tools/latest/bin/ || echo "cmdline-tools directory not found"
        ls -la $ANDROID_HOME/tools/bin/ || echo "tools/bin directory not found"
        ls -la $ANDROID_HOME/build-tools/30.0.3/ || echo "Build-tools directory not found"
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then echo "sdkmanager found"; else echo "sdkmanager not found"; exit 1; fi
        if [ -f "$ANDROID_HOME/tools/bin/sdkmanager" ]; then echo "sdkmanager symlink found"; else echo "sdkmanager symlink not found"; exit 1; fi
        if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then echo "AIDL found"; else echo "AIDL not found"; exit 1; fi
    - name: Initialize Buildozer
      run: |
        /home/runner/.local/bin/buildozer init
    - name: Configure Buildozer
      run: |
        sed -i 's/requirements = .*/requirements = python3,kivy==2.2.1,pyjnius==1.6.1,plyer,difflib/' buildozer.spec
        sed -i 's/#icon = .*/icon = icon.ico/' buildozer.spec
        sed -i 's/android.permissions = .*/android.permissions = INTERNET,ACCESS_NETWORK_STATE/' buildozer.spec
        sed -i 's/title = .*/title = Citations Positives/' buildozer.spec
        sed -i 's/package.name = .*/package.name = citationspositives/' buildozer.spec
        sed -i 's/package.domain = .*/package.domain = org.example/' buildozer.spec
        sed -i 's/version = .*/version = 1.0/' buildozer.spec
        sed -i 's/orientation = .*/orientation = portrait/' buildozer.spec
        sed -i 's|#android.sdk_path =.*|android.sdk_path = /home/runner/android-sdk|' buildozer.spec
        sed -i 's|#android.ndk_path =.*|android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b|' buildozer.spec
        sed -i 's/log_level = .*/log_level = 2/' buildozer.spec
        sed -i 's/android.archs = .*/android.archs = arm64-v8a/' buildozer.spec
    - name: Build APK
      run: |
        export ANDROID_HOME=/home/runner/android-sdk
        export ANDROID_SDK_ROOT=/home/runner/android-sdk
        export PYTHONPATH=/home/runner/.local/lib/python3.8/site-packages:/usr/lib/python3/dist-packages:/usr/local/lib/python3.8/dist-packages:$PYTHONPATH
        export PATH=/bin:/usr/bin:/usr/local/bin:/home/runner/.local/bin:$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
        /home/runner/.local/bin/buildozer android debug
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: apk
        path: bin/*.apk
