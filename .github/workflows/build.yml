name: Android APK Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ANDROID_SDK_ROOT: /home/runner/android-sdk
  BUILD_TOOLS_VERSION: '34.0.0'
  PLATFORM_VERSION: '34'
  NDK_VERSION: '25.2.9519653'
  MIN_SDK_VERSION: 21

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-22.04
    timeout-minutes: 25

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          git unzip openjdk-11-jdk \
          python3-dev python3-pip python3-venv \
          zlib1g-dev libffi-dev libssl-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip wheel
        pip install --user buildozer cython==0.29.33 kivy==2.2.1

    - name: Set up Android SDK
      run: |
        mkdir -p $ANDROID_SDK_ROOT
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT
        mv $ANDROID_SDK_ROOT/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
        
        echo "Installing Android SDK components..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
          "platform-tools" \
          "build-tools;$BUILD_TOOLS_VERSION" \
          "platforms;android-$PLATFORM_VERSION" \
          "ndk;$NDK_VERSION"
        
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> $GITHUB_PATH

    - name: Configure Buildozer
      run: |
        buildozer init
        cat > buildozer.spec <<EOL
[app]
title = MyKivyApp
package.name = mykivyapp
package.domain = org.example
version = 1.0.0
requirements = python3,kivy==2.2.1
android.api = $PLATFORM_VERSION
android.minapi = $MIN_SDK_VERSION
android.sdk_path = $ANDROID_SDK_ROOT
android.ndk_path = $ANDROID_SDK_ROOT/ndk/$NDK_VERSION
android.build_tools = $BUILD_TOOLS_VERSION
android.arch = armeabi-v7a
android.permissions = INTERNET
orientation = portrait
log_level = 2
EOL

    - name: Build APK
      run: |
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION
        buildozer -v android clean
        buildozer -v android debug

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: bin/*.apk
        retention-days: 7

    - name: Verify APK
      if: always()
      run: |
        APK_PATH=$(ls bin/*.apk 2>/dev/null | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "APK built successfully!"
          echo "APK size: $(du -h $APK_PATH | cut -f1)"
          $ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/aapt dump badging "$APK_PATH" | grep -E 'package:|launchable-activity:'
        else
          echo "::error::APK file not found!"
          ls -R bin/
          exit 1
        fi
