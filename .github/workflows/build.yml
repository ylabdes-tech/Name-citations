name: Build Android APK

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ANDROID_HOME: /home/runner/android-sdk
  ANDROID_SDK_ROOT: /home/runner/android-sdk
  PATH: $PATH:/home/runner/android-sdk/cmdline-tools/latest/bin:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/build-tools/30.0.3
  BUILD_TOOLS_VERSION: '30.0.3'
  PLATFORM_VERSION: 'android-30'
  NDK_VERSION: '25b'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          git tar unzip openjdk-8-jdk build-essential \
          python3-dev python3-pip python3-setuptools python3-wheel \
          zlib1g-dev libffi-dev libssl-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install --user buildozer cython kivy==2.2.1 pyjnius plyer
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Set up Android SDK
      run: |
        mkdir -p $ANDROID_HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -qq cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
        mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

        echo "Installing Android SDK components..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME \
          "platform-tools" \
          "build-tools;$BUILD_TOOLS_VERSION" \
          "platforms;$PLATFORM_VERSION" \
          "ndk;$NDK_VERSION"

        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        echo "Android SDK setup complete"

    - name: Configure Buildozer
      run: |
        buildozer init
        cat <<EOT > buildozer.spec
[app]
title = Citations Positives
package.name = citationspositives
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,ttf,json
version = 1.0
requirements = python3,kivy==2.2.1,pyjnius,plyer
orientation = portrait
osx.python_version = 3
osx.kivy_version = 2.2.1
android.permissions = INTERNET,ACCESS_NETWORK_STATE
android.api = 30
android.minapi = 21
android.sdk = $ANDROID_HOME
android.ndk = $ANDROID_HOME/ndk/$NDK_VERSION
android.build_tools = $BUILD_TOOLS_VERSION
android.arch = armeabi-v7a
log_level = 2
EOT

    - name: Build APK with Buildozer
      run: |
        export BUILD_PATH=$(pwd)/.buildozer
        mkdir -p $BUILD_PATH/android/platform
        ln -sf $ANDROID_HOME $BUILD_PATH/android/platform/android-sdk
        ln -sf $ANDROID_HOME/ndk/$NDK_VERSION $BUILD_PATH/android/platform/android-ndk-r$NDK_VERSION
        
        buildozer -v android clean
        buildozer -v android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: bin/*.apk
        retention-days: 7

    - name: Verify APK
      if: always()
      run: |
        apk_path=$(ls bin/*.apk 2>/dev/null | head -1)
        if [ -f "$apk_path" ]; then
          echo "APK built successfully: $(ls -lh $apk_path)"
          aapt dump badging $apk_path | grep -E 'package:|launchable-activity:'
        else
          echo "::error::APK file not found!"
          exit 1
        fi
