name: Build Android APK
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_HOME: /home/runner/android-sdk
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      LD_LIBRARY_PATH: /usr/lib/jvm/java-11-openjdk-amd64/lib/server:/usr/lib
      CFLAGS: -I/usr/lib/jvm/java-11-openjdk-amd64/include -I/usr/lib/jvm/java-11-openjdk-amd64/include/linux
      LDFLAGS: -L/usr/lib/jvm/java-11-openjdk-amd64/lib/server -ljvm
      PATH: /bin:/usr/bin:/usr/local/bin:/home/runner/.local/bin:$PATH:/home/runner/android-sdk/cmdline-tools/latest/bin:/home/runner/android-sdk/platform-tools:/home/runner/android-sdk/build-tools/30.0.3
    steps:
      - name: Clean apt locks
        run: |
          echo "Nettoyage des verrous apt..."
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -f /var/cache/apt/*.bin
          sudo rm -rf /var/lib/apt/lists/*
      - name: Ajouter le PPA deadsnakes pour Python 3.9
        run: |
          echo "Ajout du PPA deadsnakes..."
          for i in {1..10}; do
            sudo apt-get update && \
            sudo apt-get install -y software-properties-common && \
            sudo add-apt-repository ppa:deadsnakes/ppa -y && \
            sudo apt-get update && break || \
            echo "Tentative $i échouée, nouvelle tentative..."; sleep 20
          done
          echo "Vérification des paquets Python disponibles :"
          sudo apt-cache search python3.9 || echo "Échec de la recherche des paquets python3.9"
          sudo apt-cache policy python3.9 || echo "Échec de la vérification de la politique python3.9"
      - name: Installer les dépendances système
        run: |
          echo "Installation des dépendances système..."
          sudo apt-get install -y \
            git tar build-essential \
            python3-dev python3.9 python3.9-dev python3.9-venv python3.9-distutils python3-pip \
            ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            openjdk-11-jdk openjdk-11-jre unzip zlib1g-dev libffi-dev libssl-dev \
            gcc g++ libc6-dev libstdc++6 libjpeg-dev libpng-dev
          echo "Vérification des bibliothèques JNI :"
          find /usr/lib/jvm/java-11-openjdk-amd64 -name 'libjvm.so' || { echo "libjvm.so introuvable"; exit 1; }
          find /usr/lib -name 'libffi.so' || { echo "libffi.so introuvable"; exit 1; }
          find /usr/lib/jvm/java-11-openjdk-amd64/include -name 'jni.h' || { echo "jni.h introuvable"; exit 1; }
      - name: Vérifier les installations Python et Java
        run: |
          echo "Vérification de Python 3.9 :"
          python3.9 --version || { echo "Échec de l'installation de Python 3.9"; exit 1; }
          python3.9 -m ensurepip --version || { echo "ensurepip introuvable pour Python 3.9"; exit 1; }
          echo "Vérification de Java :"
          echo "JAVA_HOME est défini à $JAVA_HOME"
          $JAVA_HOME/bin/java -version || { echo "Échec de l'installation de Java"; exit 1; }
          echo "Vérification des en-têtes JNI :"
          ls -la /usr/lib/jvm/java-11-openjdk-amd64/include/jni.h || { echo "jni.h introuvable"; exit 1; }
      - name: Checkout du dépôt
        uses: actions/checkout@v4
      - name: Configurer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Nettoyer l'environnement Python
        run: |
          echo "Nettoyage de l'environnement Python utilisateur..."
          sudo rm -rf /home/runner/.local /home/runner/.kivy /home/runner/.cache/pip /home/runner/venv
      - name: Créer et activer un environnement virtuel pour Python 3.9
        run: |
          echo "Création de l'environnement virtuel pour Python 3.9..."
          python3.9 -m venv /home/runner/venv
          source /home/runner/venv/bin/activate
          echo "Mise à jour de pip..."
          python -m pip install --upgrade pip==24.2
          echo "Version actuelle de pip :"
          python -m pip --version
      - name: Installer les dépendances Python
        run: |
          source /home/runner/venv/bin/activate
          echo "Installation de Cython, setuptools et wheel..."
          python -m pip install cython==0.29.21 setuptools==65.5.1 wheel==0.38.4 --no-cache-dir --verbose > pip_cython_setuptools_install.log 2>&1 || { echo "Échec de l'installation de Cython, setuptools ou wheel"; cat pip_cython_setuptools_install.log; exit 1; }
          echo "Installation des dépendances Python de base..."
          python -m pip install buildozer kivy==2.2.1 plyer --no-cache-dir --verbose > pip_base_install.log 2>&1 || { echo "Échec de l'installation des dépendances de base"; cat pip_base_install.log; exit 1; }
          echo "Installation de pyjnius..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          export LD_LIBRARY_PATH=/usr/lib/jvm/java-11-openjdk-amd64/lib/server:/usr/lib
          export CFLAGS="-I/usr/lib/jvm/java-11-openjdk-amd64/include -I/usr/lib/jvm/java-11-openjdk-amd64/include/linux"
          export LDFLAGS="-L/usr/lib/jvm/java-11-openjdk-amd64/lib/server -ljvm"
          python -m pip install pyjnius==1.3.0 --no-binary pyjnius --no-cache-dir --verbose --no-build-isolation > pip_pyjnius_install.log 2>&1 || { echo "Échec de l'installation de pyjnius"; cat pip_pyjnius_install.log; exit 1; }
          echo "Vérification immédiate de pyjnius..."
          python -c "import pyjnius; print('Pyjnius version:', pyjnius.__version__)" || { echo "Échec de l'importation immédiate de Pyjnius"; exit 1; }
          echo "Liste des paquets Python installés :"
          python -m pip list
          echo "Vérification des chemins Python :"
          python -m site
          echo "Vérification des dépendances Python :"
          python -c "import cython; print('Cython version:', cython.__version__)" || { echo "Échec de l'importation de Cython"; exit 1; }
          python -c "import kivy; print('Kivy version:', kivy.__version__)" || { echo "Échec de l'importation de Kivy"; exit 1; }
          python -c "import pyjnius; print('Pyjnius version:', pyjnius.__version__)" || { echo "Échec de l'importation de Pyjnius"; exit 1; }
          python -c "import plyer; print('Plyer importé avec succès')" || { echo "Échec de l'importation de Plyer"; exit 1; }
          echo "Liste du contenu de site-packages :"
          ls -la /home/runner/venv/lib/python3.9/site-packages/ || echo "Échec de l'affichage de site-packages"
      - name: Générer et configurer buildozer.spec
        run: |
          source /home/runner/venv/bin/activate
          echo "Génération du fichier buildozer.spec..."
          buildozer init || { echo "Échec de la génération de buildozer.spec"; exit 1; }
          echo "Configuration du fichier buildozer.spec..."
          sed -i 's/requirements = .*/requirements = python3,kivy==2.2.1,pyjnius==1.3.0,plyer,difflib/' buildozer.spec
          sed -i 's/#icon = .*/icon = icon.ico/' buildozer.spec
          sed -i 's/android.permissions = .*/android.permissions = INTERNET,ACCESS_NETWORK_STATE/' buildozer.spec
          sed -i 's/title = .*/title = Citations Positives/' buildozer.spec
          sed -i 's/package.name = .*/package.name = citationspositives/' buildozer.spec
          sed -i 's/package.domain = .*/package.domain = org.example/' buildozer.spec
          sed -i 's/version = .*/version = 1.0/' buildozer.spec
          sed -i 's/orientation = .*/orientation = portrait/' buildozer.spec
          sed -i 's|#android.sdk_path =.*|android.sdk_path = /home/runner/android-sdk|' buildozer.spec
          sed -i 's|#android.ndk_path =.*|android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b|' buildozer.spec
          sed -i 's/log_level = .*/log_level = 2/' buildozer.spec
          sed -i 's/android.archs = .*/android.archs = arm64-v8a/' buildozer.spec
          echo "Contenu du fichier buildozer.spec :"
          cat buildozer.spec
      - name: Nettoyer le cache Buildozer
        run: |
          source /home/runner/venv/bin/activate
          echo "Nettoyage du cache Buildozer et python-for-android..."
          sudo rm -rf /home/runner/.buildozer .buildozer /home/runner/work/Name-citations/Name-citations/.buildozer/android/platform/build-arm64-v8a_armeabi-v7a
      - name: Installer le SDK Android
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          echo "Installation des composants SDK..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "build-tools;30.0.3" "platforms;android-30" "platform-tools"
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME --licenses
          echo "Vérification des composants SDK installés :"
          ls -la $ANDROID_HOME/build-tools/30.0.3/ || echo "Répertoire build-tools introuvable"
          ls -la $ANDROID_HOME/platforms/android-30/ || echo "Répertoire platforms/android-30 introuvable"
          ls -la $ANDROID_HOME/platform-tools/ || echo "Répertoire platform-tools introuvable"
      - name: Construire l'APK
        run: |
          source /home/runner/venv/bin/activate
          export ANDROID_HOME=/home/runner/android-sdk
          export ANDROID_SDK_ROOT=/home/runner/android-sdk
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          export LD_LIBRARY_PATH=/usr/lib/jvm/java-11-openjdk-amd64/lib/server:/usr/lib
          export PATH=/bin:/usr/bin:/usr/local/bin:/home/runner/.local/bin:$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
          buildozer android debug
      - name: Téléverser l'APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: bin/*.apk
